#!/usr/bin/env python
# -*- coding: utf-8 -*-

import os
import sys
import shutil
import re
import sass
from argparse import ArgumentParser, ArgumentTypeError
from ConfigParser import SafeConfigParser

def printerror(msg):
	print >> sys.stderr, msg

def fatal(msg, exitcode = 1):
	printerror(msg)
	exit(exitcode)

def iterateFiles(path, callback, context = None):
	for subdir, dirs, files in os.walk(path):
		for filename in files:
			absolute_file_path = os.path.join(subdir, filename)
			callback(absolute_file_path, context)

def copyFile(fromPath, toPath, filename):
	shutil.copy(os.path.join(fromPath, filename), os.path.join(toPath, filename))

def read_file(filename):
	if not os.path.exists(filename):
		fatal("File does not exist: %s" % filename)
	f = open(filename, 'r')
	result = f.read()
	f.close()
	return result

def write_file(filename, data):
	f = open(filename, 'w')
	f.write(data)
	f.close()

class Base16:
	def __init__(self, config, variant):
		meta = config['meta']
		self.colors = config['base16']
		self.variant = variant
		self.author = meta['author']
		self.scheme = '%s %s' % (meta['scheme'], variant)
		self.title = 'Base16 %s' % self.scheme
		self.background_opacity = config.background_opacity

	def color_variant(self, color):
		lvariant = self.variant.lower()
		m = re.compile('^base0([0-7])$').match(color)
		if not m:
			return None
		vmap = range(8)
		idx = vmap.index(int(m.group(1)))
		if lvariant == 'dark':
			return 'base0%s' % vmap[::-1][idx]
		elif lvariant == 'light':
			return 'base0%s' % vmap[idx]
		return None

	def format(self, string):
		return string.format(
			author = self.author,
			scheme = self.scheme,
			title = self.title,
			variant = self.variant,
			base07 = self.colors[self.color_variant('base07')],
		)

	def sass_header(self):
		r = lambda x: int(x[0:2], 16)
		g = lambda x: int(x[2:4], 16)
		b = lambda x: int(x[4:6], 16)

		result = '$bgalpha: %s\n' % self.background_opacity
		for key in self.colors:
			if key == '__name__': continue
			value = self.colors[key]
			variant = self.color_variant(key)
			key = key[:-1] + key[-1].upper()
			if variant:
				result += '$%s: #%s\n' % (key, self.colors[variant])
				result += '$%sfixed: #%s\n' % (key, value)
			else:
				result += '$%s: #%s\n' % (key, value)
			result += '$%sr: %s\n' % (key, r(value))
			result += '$%sg: %s\n' % (key, g(value))
			result += '$%sb: %s\n' % (key, b(value))
		return result

	def write(self, path, filename, data):
		write_file(os.path.join(path, filename), self.format(data))

	def write_sass(self, path, filename, data):
		data = self.sass_header() + data
		# Compiling a string in SASS instead of SCSS format is not possible, the
		# detection is based on the file extension.
		tmp = os.path.join(path, 'tmp_' + os.path.basename(filename) + '.sass')
		write_file(tmp, data)
		css = sass.compile_file(tmp, output_style = sass.SASS_STYLE_COMPRESSED)
		write_file(os.path.join(path, filename), css)
		os.remove(tmp)

class Settings:
	__slots__ = [
		'output_path',
		'preview',
		'default_irc_colors',
		'light',
		'dark',
		'background_opacity',
	]

def generateTextualStyle(base16, settings):
	path = os.path.join(settings.output_path, base16.title)

	if os.path.exists(path):
		shutil.rmtree(path)

	data_path = os.path.join(path, 'Data')
	settings_path = os.path.join(data_path, 'Settings')
	template_path = os.path.join(data_path, 'Templates')

	os.makedirs(settings_path)
	os.makedirs(template_path)

	file_path = 'files'

	design_sass = read_file(os.path.join(file_path, 'design.sass'))
	if not settings.default_irc_colors:
		design_sass += read_file(os.path.join(file_path, 'irc_colors.sass'))
	base16.write_sass(path, 'design.css', design_sass)

	base16.write(path, 'copyright.txt', copyright_txt)
	base16.write(settings_path, 'styleSettings.plist', stylesettings_plist)

	files_to_copy = [
		(path, 'scripts.js'),
		(template_path, 'encryptedMessageLock.mustache'),
	]

	if settings.preview:
		files_to_copy.append((path, 'preview.htm'))

	for destination, filename in files_to_copy:
		copyFile(file_path, destination, filename)

	print('  - %s' % path)

def generateTextualStyles(filename, settings):
	if not filename.endswith('.cfg'):
		return

	config = B16TConfigParser(filename)

	config.background_opacity = settings.background_opacity

	if settings.light:
		generateTextualStyle(Base16(config, 'Light'), settings)
	if settings.dark:
		generateTextualStyle(Base16(config, 'Dark'), settings)

def B16TConfigParser(configfile):
	if not os.path.exists(configfile):
		fatal("Missing config file: '%s'" % configfile)

	required_options = {
		'meta' : [
			'author',
			'scheme',
		],
		'base16' : [
			'base00', 'base01', 'base02', 'base03',
			'base04', 'base05', 'base06', 'base07',
			'base08', 'base09', 'base0A', 'base0B',
			'base0C', 'base0D', 'base0E', 'base0F',
		],
	}

	parser = SafeConfigParser()
	parser.read(configfile)
	for section in required_options:
		if not parser.has_section(section):
			fatal(
				"Missing section '%s' in config file: '%s'"
				% (section, configfile)
			)
		for option in required_options[section]:
			if not parser.has_option(section, option):
				fatal(
					"Missing option '%s' in section '%s' in config file: '%s'"
					% (option, section, configfile)
				)

	return parser._sections

def B16TArgumentParser():
	def percentage(arg):
		value = int(arg)
		if not (0 <= value <= 100):
			msg = "%r needs to be a value between 0 and 100" % arg
			raise ArgumentTypeError(msg)
		return value / 100.0

	parser = ArgumentParser(
		description = """
			This is a script which generates styles for the Textual IRC client
			based on the color schemes of Base16 by chriskempson and the
			default Simplified style bundled with Textual.
		""",
	)
	variantGrp = parser.add_argument_group('variants')
	variantGrp.add_argument(
		'-l', '--light',
		help = """
			Only generate the light variant.
		""",
		action = 'store_true',
		default = False,
	)
	variantGrp.add_argument(
		'-d', '--dark',
		help = """
			Only generate the dark variant.
		""",
		action = 'store_true',
		default = False,
	)
	parser.add_argument(
		'--default-irc-colors',
		help = """
			This option disables replacing the default IRC colors to fit with
			the Style. This means that the default IRC colors defined by
			Textual are used.
		""",
		action = 'store_true',
		default = False,
	)
	parser.add_argument(
		'--background-opacity',
		help = """
			Set the opacity of background colors of colored lines. Setting
			this to 0 will disable background colors for lines. Setting this
			above 75 might result in unreadable text of the same color, ie.
			own messages have the same background color as the own nick but is
			less opaque to distinct.
		""",
		type = percentage,
		action = 'store',
		default = 0.2,
	)
	parser.add_argument(
		'-s', '--scheme',
		help = """
			Generate the style for a given scheme only. If this option is not
			given, styles for all Base16 schemes are generated. The schemes are
			stored in the 'schemes' subdirectory.
		""",
		action = 'store',
	)
	parser.add_argument(
		'-i', '--install',
		help = """
			This installs the generated style(s) directly into the location
			where the Textual styles are stored. If this is not set, the
			generated styles will be stored in the 'output' subdirectory.
		""",
		action = 'store_true',
		default = False,
	)
	parser.add_argument(
		'-p', '--preview',
		help = """
			If this is enabled preview files will be generated for each style.
			Usually you don't want to enable this.
		""",
		action = 'store_true',
		default = False,
	)
	return parser

def main():
	parser = B16TArgumentParser()
	args = parser.parse_args()

	output_path = 'output'
	config_path = 'schemes'
	install_path = os.path.expanduser('~/Library/Group Containers/8482Q6EPL6.com.codeux.irc.textual/Library/Application Support/Textual/Styles')

	if not os.path.exists(config_path):
		fatal('Missing configuration files, please run the base16 command first.')

	if args.install:
		output_path = install_path

	if not os.path.exists(output_path):
		os.makedirs(output_path)

	neither = not (args.light or args.dark)
	settings = Settings()
	settings.output_path = output_path
	settings.preview = args.preview
	settings.default_irc_colors = args.default_irc_colors
	settings.light = args.light or neither
	settings.dark = args.dark or neither
	settings.background_opacity = args.background_opacity

	if args.scheme:
		scheme = os.path.expanduser(args.scheme)
		if not os.path.exists(scheme):
			fatal("No such file: '%s'" % scheme)
		generateTextualStyles(scheme, settings)
	else:
		iterateFiles(config_path, generateTextualStyles, settings)

copyright_txt = """\
Scheme: {title}
Author: {author}

This style was automatically generated by an advanced base16-builder written by
FroZnShiva (https://github.com/FroZnShiva)

This style is based on the Simplified Light style shipped with Textual.

Simplified Light original copyright:

This style is a modified and stripped down version of
the "Simplified" theme developed by "Cowboy" Ben Alman
(http://benalman.com/). Copyright Â© 2010, 2011, 2012.
"""

stylesettings_plist = """\
<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
<plist version="1.0">
<dict>
	<key>Nickname Format</key>
	<string></string>
	<key>Timestamp Format</key>
	<string></string>
	<key>Override Channel Font</key>
	<dict>
		<key>Font Name</key>
		<string></string>
		<key>Font Size</key>
		<integer>0</integer>
	</dict>
	<key>Indentation Offset</key>
	<integer>6</integer>
	<key>Underlying Window Color</key>
	<string>#{base07}</string>
	<key>Force Invert Sidebars</key>
	<false/>
	<key>Template Engine Versions</key>
	<dict>
		<key>default</key>
		<integer>3</integer>
	</dict>
</dict>
</plist>
"""

if __name__ == '__main__': main()
